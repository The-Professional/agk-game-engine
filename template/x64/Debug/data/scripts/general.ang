/// *************************************************************************
/// Gradually change the color to the passed in color.
/// *************************************************************************
shared float ColorTo( CAnimation & anim, CColor &in value, float startTime, float endTime, bool allowBreak = true )
{
    CColor current = anim.GetColor();
    CColor diff = value - current;
	float currentTime = startTime;

	if( allowBreak )
		while( currentTime < endTime )
		{
			if( anim.GetStopType() == EST_BREAK )
				return GetElapsedTime();
	
			anim.SetColor( current + diff * ( currentTime / endTime ) );
			Suspend();
			currentTime += GetElapsedTime();
		}
	else
		while( currentTime < endTime )
		{
			anim.SetColor( current + diff * ( currentTime / endTime ) );
			Suspend();
			currentTime += GetElapsedTime();
		}

	anim.SetColor( value );

	return currentTime - endTime;
}


/// *************************************************************************
/// Gradually change the position to the passed in position.
/// *************************************************************************
shared float MoveTo( CAnimation & anim, CVector3 &in value, float startTime, float endTime, bool allowBreak = true )
{
    CVector3 current = anim.GetPos();
    CVector3 diff = value - current;
	float currentTime = startTime;

	if( allowBreak )
		while( currentTime < endTime )
		{
			if( anim.GetStopType() == EST_BREAK )
				return GetElapsedTime();
	
			anim.SetPos( current + diff * ( currentTime / endTime ) );
			Suspend();
			currentTime += GetElapsedTime();
		}
	else
		while( currentTime < endTime )
		{
			anim.SetPos( current + diff * ( currentTime / endTime ) );
			Suspend();
			currentTime += GetElapsedTime();
		}

	anim.SetPos( value );

	return currentTime - endTime;
}