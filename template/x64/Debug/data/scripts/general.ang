/// *************************************************************************
/// Gradually change the color to the passed in color.
/// *************************************************************************
shared float ColorTo( CAnimation & anim, CColor &in value, float endTime, float startTime = 0 )
{
    CColor current = anim.GetColor();
    CColor diff = value - current;
	float currentTime = startTime;

    do
    {
        if( anim.GetStopType() == EST_BREAK )
            return 0;
	
        currentTime += GetElapsedTime();
	
        if( currentTime >= endTime )
            anim.SetColor( value );
        else
            anim.SetColor( current + diff * currentTime / endTime );
	
        Suspend();
    }
    while( currentTime < endTime );

	return GetRemainingTime( currentTime, endTime );
}


/// *************************************************************************
/// Gradually change the position to the passed in position.
/// *************************************************************************
shared float MoveTo( CAnimation & anim, CVector3 &in value, float endTime, float startTime = 0 )
{
    CVector3 current = anim.GetPos();
    CVector3 diff = value - current;
	float currentTime = startTime;

    do
    {
        if( anim.GetStopType() == EST_BREAK )
            return 0;
	
        currentTime += GetElapsedTime();
	
        if( currentTime >= endTime )
            anim.SetPos( value );
        else
            anim.SetPos( current + diff * currentTime / endTime );
	
        Suspend();
    }
    while( currentTime < endTime );

	return GetRemainingTime( currentTime, endTime );
}


/// *************************************************************************
/// Get the remaining time.
/// *************************************************************************
shared float GetRemainingTime( float currentTime, float endTime )
{
	// Get the number of times the current time fits into end time.
	// This is so we don't hit any kind of spiral of death if the game lagged.
	int d = currentTime / endTime;

	return currentTime - endTime * d;
}